# Servex Server Configuration Example
# This file demonstrates all available configuration options for servex

# Basic server configuration
server:
  # HTTP server address (optional, can be overridden by SERVEX_SERVER_HTTP)
  http: ":8080"
  
  # HTTPS server address (optional, can be overridden by SERVEX_SERVER_HTTPS)
  # https: ":8443"
  
  # TLS certificate file path (required for HTTPS)
  # cert_file: "/etc/ssl/certs/server.crt"
  
  # TLS private key file path (required for HTTPS)
  # key_file: "/etc/ssl/private/server.key"
  
  # Request timeout settings
  read_timeout: "30s"
  read_header_timeout: "10s"
  idle_timeout: "120s"
  
  # Simple bearer token authentication
  # auth_token: "secret-api-key-change-in-production"
  
  # Health endpoint configuration
  enable_health_endpoint: true
  health_path: "/health"
  
  # Metrics endpoint configuration
  enable_default_metrics: true
  metrics_path: "/metrics"

  # Request size limits
  max_request_body_size: 33554432    # 32MB
  max_json_body_size: 1048576        # 1MB
  max_file_upload_size: 1048576      # 1MB
  max_multipart_memory: 10485760     # 10MB
  enable_request_size_limits: true
  
  # Error handling
  send_error_to_client: false        # Set to true only in development

# JWT-based authentication with user management
auth:
  enabled: false
  
  # Use in-memory database (for development/testing only)
  use_memory_database: true
  
  # JWT signing secrets (use environment variables in production)
  # jwt_access_secret: "your-32-byte-hex-encoded-access-key"
  # jwt_refresh_secret: "your-32-byte-hex-encoded-refresh-key"
  
  # Token durations
  access_token_duration: "15m"
  refresh_token_duration: "24h"
  
  # JWT issuer name
  issuer: "my-application"
  
  # Cookie name for refresh token
  refresh_token_cookie_name: "_servexrt"
  
  # Authentication API base path
  base_path: "/api/v1/auth"
  
  # Default roles for new users
  initial_roles: ["user"]
  
  # Don't register default auth routes (if you want custom implementation)
  not_register_routes: false

# Rate limiting configuration
rate_limit:
  enabled: true
  
  # Allow 100 requests per minute per client
  requests_per_interval: 100
  interval: "1m"
  
  # Allow burst of 20 requests
  burst_size: 20
  
  # Response when rate limit is exceeded
  status_code: 429
  message: "Rate limit exceeded. Please try again later."
  
  # Paths to exclude from rate limiting
  exclude_paths:
    - "/health"
    - "/metrics"
    - "/favicon.ico"
    - "/robots.txt"
  
  # Paths to include in rate limiting (if empty, all paths are included)
  include_paths: []
  
  # Trusted proxy IP ranges for client IP detection
  trusted_proxies:
    - "10.0.0.0/8"
    - "172.16.0.0/12"
    - "192.168.0.0/16"

# Request filtering configuration
filter:
  # IP address filtering
  allowed_ips: []                    # Empty means all IPs allowed
  blocked_ips:
    - "192.0.2.0/24"                # Example blocked range
    - "203.0.113.0/24"              # Another example blocked range
  
  # User-Agent filtering
  allowed_user_agents: []            # Empty means all user agents allowed
  allowed_user_agents_regex: []
  
  blocked_user_agents:
    - "BadBot/1.0"
    - "MaliciousBot/2.0"
  
  blocked_user_agents_regex:
    - ".*[Bb]ot.*"                  # Block anything with "bot" in the name
    - ".*[Ss]craper.*"              # Block scrapers
    - ".*[Cc]rawler.*"              # Block crawlers
    - "curl.*"                       # Block curl
    - "wget.*"                       # Block wget
  
  # Header filtering
  allowed_headers: {}               # Empty means all headers allowed
  allowed_headers_regex: {}
  blocked_headers: {}
  blocked_headers_regex: {}
  
  # Query parameter filtering
  allowed_query_params: {}          # Empty means all query params allowed
  allowed_query_params_regex: {}
  blocked_query_params:
    debug: ["true", "1", "on"]      # Block debug parameters
    test: ["true", "1", "on"]       # Block test parameters
  blocked_query_params_regex: {}
  
  # Paths to exclude from filtering
  exclude_paths:
    - "/health"
    - "/metrics"
  
  # Paths to include in filtering (if empty, all paths are included)
  include_paths: []
  
  # Response when request is filtered
  status_code: 403
  message: "Access denied by security filter"
  
  # Trusted proxy IP ranges
  trusted_proxies:
    - "10.0.0.0/8"
    - "172.16.0.0/12"

# Security headers and CSRF protection configuration
security:
  enabled: true
  
  # CSRF (Cross-Site Request Forgery) Protection
  csrf_enabled: true                           # Enable CSRF protection
  csrf_token_name: "X-CSRF-Token"            # Header name for CSRF token
  csrf_cookie_name: "csrf_token"              # Cookie name for CSRF token
  csrf_cookie_http_only: true                 # HttpOnly cookie for security
  csrf_cookie_same_site: "Lax"               # SameSite policy (Strict/Lax/None)
  csrf_cookie_secure: false                   # Secure cookie (true for HTTPS)
  csrf_cookie_path: "/"                       # Cookie path
  csrf_cookie_max_age: 3600                   # Cookie lifetime in seconds (1 hour)
  csrf_token_endpoint: "/api/csrf-token"      # Endpoint to get CSRF tokens (for SPAs)
  csrf_error_message: "CSRF token validation failed. Please refresh and try again."
  csrf_safe_methods: ["GET", "HEAD", "OPTIONS", "TRACE"]  # Methods that bypass CSRF
  
  # Security Headers
  content_security_policy: "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'"
  
  # Clickjacking protection
  x_frame_options: "DENY"
  
  # MIME type sniffing protection
  x_content_type_options: "nosniff"
  
  # XSS protection
  x_xss_protection: "1; mode=block"
  
  # HTTPS enforcement (only set if you fully support HTTPS)
  strict_transport_security: "max-age=31536000; includeSubDomains; preload"
  
  # Referrer policy
  referrer_policy: "strict-origin-when-cross-origin"
  
  # Permissions policy
  permissions_policy: "geolocation=(), microphone=(), camera=(), payment=(), usb=()"
  
  # Cross-domain policies
  x_permitted_cross_domain_policies: "none"
  
  # Cross-origin policies
  cross_origin_embedder_policy: "require-corp"
  cross_origin_opener_policy: "same-origin"
  cross_origin_resource_policy: "same-site"
  
  # Paths to exclude from security headers and CSRF protection
  exclude_paths:
    - "/health"                     # Health checks
    - "/metrics"                    # Metrics endpoint
    - "/api/csrf-token"            # CSRF token endpoint
    - "/api/public/*"              # Public APIs that don't need CSRF
    - "/webhooks/*"                # External webhooks
  
  # Paths to include in security headers (if empty, all paths are included)
  include_paths: []

# Cache control configuration
cache:
  enabled: true
  
  # Default cache control header
  cache_control: "public, max-age=3600"
  
  # Absolute expiration time (optional)
  expires: ""
  
  # Entity tag for cache validation (optional)
  etag: ""
  
  # Last modified time (optional)
  last_modified: ""
  
  # Vary header for content negotiation
  vary: "Accept-Encoding, Accept"
  
  # Paths to exclude from cache headers
  exclude_paths:
    - "/api/*"                      # APIs usually shouldn't be cached
    - "/auth/*"                     # Authentication endpoints
  
  # Paths to include in cache headers (if empty, all paths are included)
  include_paths:
    - "/static/*"                   # Static assets should be cached
    - "/assets/*"                   # Asset files

# Logging configuration
logging:
  # Disable all request logging
  disable_request_logging: false
  
  # Don't log client errors (4xx status codes)
  no_log_client_errors: true
  
  # Specific fields to include in logs (if empty, all fields are included)
  log_fields:
    - "method"
    - "url"
    - "status"
    - "duration"
    - "ip"
    - "user_agent"

# Static file serving configuration
static_files:
  enabled: true
  
  # Directory containing static files (build output for SPAs)
  dir: "build"
  
  # URL prefix for serving files (empty = serve from root)
  url_prefix: ""
  
  # Enable SPA mode for client-side routing
  spa_mode: true
  
  # Fallback file for SPA routing (default: index.html)
  index_file: "index.html"
  
  # Prefix to strip from URL before file lookup
  strip_prefix: ""
  
  # Paths to exclude from static file serving
  exclude_paths:
    - "/api/*"                      # API endpoints
    - "/auth/*"                     # Authentication endpoints
    - "/admin/*"                    # Admin interfaces
    - "/ws/*"                       # WebSocket endpoints
  
  # Default cache duration for static files (in seconds)
  cache_max_age: 86400              # 1 day
  
  # File-specific cache rules
  cache_rules:
    ".js": 31536000                 # 1 year for JavaScript files
    ".css": 31536000                # 1 year for CSS files
    ".html": 3600                   # 1 hour for HTML files
    ".png": 2592000                 # 30 days for images
    ".jpg": 2592000                 # 30 days for images
    ".jpeg": 2592000                # 30 days for images
    ".gif": 2592000                 # 30 days for images
    ".svg": 2592000                 # 30 days for SVG files
    ".ico": 31536000                # 1 year for favicons
    ".woff": 31536000               # 1 year for fonts
    ".woff2": 31536000              # 1 year for fonts
    ".ttf": 31536000                # 1 year for fonts
    ".eot": 31536000                # 1 year for fonts 